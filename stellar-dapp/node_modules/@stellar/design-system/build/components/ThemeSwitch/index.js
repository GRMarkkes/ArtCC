import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useCallback, useEffect, useState } from "react";
import { Icon } from "../../icons";
import "./styles.scss";
export var ThemeMode;
(function (ThemeMode) {
    ThemeMode["LIGHT"] = "sds-theme-light";
    ThemeMode["DARK"] = "sds-theme-dark";
})(ThemeMode || (ThemeMode = {}));
export var ThemeSwitch = function (_a) {
    var storageKeyId = _a.storageKeyId, onActionEnd = _a.onActionEnd;
    var prefersDarkMode = window.matchMedia("(prefers-color-scheme: dark)");
    var getCurrentMode = useCallback(function () {
        var modeSaved = storageKeyId ? localStorage.getItem(storageKeyId) : null;
        if (modeSaved) {
            return modeSaved;
        }
        return prefersDarkMode.matches ? ThemeMode.DARK : ThemeMode.LIGHT;
    }, [storageKeyId, prefersDarkMode.matches]);
    var _b = useState(Boolean(getCurrentMode() === ThemeMode.DARK)), isDarkMode = _b[0], setIsDarkMode = _b[1];
    useEffect(function () {
        var currentMode = getCurrentMode();
        var _isDarkMode = Boolean(currentMode === ThemeMode.DARK);
        setIsDarkMode(_isDarkMode);
    }, [getCurrentMode]);
    useEffect(function () {
        if (isDarkMode) {
            document.body.classList.remove(ThemeMode.LIGHT);
            document.body.classList.add(ThemeMode.DARK);
        }
        else {
            document.body.classList.remove(ThemeMode.DARK);
            document.body.classList.add(ThemeMode.LIGHT);
        }
    }, [isDarkMode]);
    var handleSwitch = function () {
        var _isDarkMode = !isDarkMode;
        setIsDarkMode(_isDarkMode);
        if (storageKeyId) {
            if (_isDarkMode) {
                localStorage.setItem(storageKeyId, ThemeMode.DARK);
            }
            else {
                localStorage.setItem(storageKeyId, ThemeMode.LIGHT);
            }
        }
        if (onActionEnd) {
            onActionEnd(_isDarkMode);
        }
    };
    return (_jsxs("label", __assign({ className: "ThemeSwitch", htmlFor: "theme-switch", title: "Switch to ".concat(isDarkMode ? "light" : "dark", " theme") }, { children: [_jsx("input", { type: "checkbox", id: "theme-switch", name: "theme-switch", checked: isDarkMode, onChange: handleSwitch }), _jsx("div", { "aria-hidden": "true", className: "ThemeSwitch__track" }), _jsxs("div", __assign({ "aria-hidden": "true", className: "ThemeSwitch__thumb" }, { children: [_jsx("div", __assign({ className: "ThemeSwitch__thumb__icon", "data-mode": ThemeMode.DARK }, { children: _jsx(Icon.ModeDark, {}) })), _jsx("div", __assign({ className: "ThemeSwitch__thumb__icon", "data-mode": ThemeMode.LIGHT }, { children: _jsx(Icon.ModeLight, {}) }))] }))] })));
};
ThemeSwitch.displayName = "ThemeSwitch";
//# sourceMappingURL=index.js.map