import { __assign, __rest, __spreadArray } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Loader } from "../Loader";
import "./styles.scss";
export var Button = function (_a) {
    var variant = _a.variant, size = _a.size, children = _a.children, icon = _a.icon, _b = _a.iconPosition, iconPosition = _b === void 0 ? "right" : _b, isLoading = _a.isLoading, isUppercase = _a.isUppercase, isFullWidth = _a.isFullWidth, isPill = _a.isPill, isExtraPadding = _a.isExtraPadding, props = __rest(_a, ["variant", "size", "children", "icon", "iconPosition", "isLoading", "isUppercase", "isFullWidth", "isPill", "isExtraPadding"]);
    var additionalClasses = __spreadArray(__spreadArray(__spreadArray(__spreadArray([
        "Button--".concat(variant),
        "Button--".concat(size)
    ], (isUppercase ? ["Button--uppercase"] : []), true), (isFullWidth || isExtraPadding ? ["Button--full-width"] : []), true), (isPill ? ["Button--pill"] : []), true), (isExtraPadding ? ["Button--extra-padding"] : []), true).join(" ");
    var renderIcon = function (position) {
        if (!icon && isLoading && position === "right") {
            return _jsx(Loader, {});
        }
        if (icon && iconPosition === position) {
            if (isLoading) {
                return _jsx(Loader, {});
            }
            return _jsx("span", __assign({ className: "Button__icon" }, { children: icon }));
        }
        return null;
    };
    return (_jsxs("button", __assign({ className: "Button ".concat(additionalClasses) }, props, (isLoading ? { disabled: true } : {}), { children: [renderIcon("left"), children !== null && children !== void 0 ? children : null, renderIcon("right")] })));
};
Button.displayName = "Button";
//# sourceMappingURL=index.js.map