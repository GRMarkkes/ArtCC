import QRCodeModal from '@walletconnect/qrcode-modal';
import { SignClient } from '@walletconnect/sign-client';
export var WalletConnectTargetChain;
(function (WalletConnectTargetChain) {
    WalletConnectTargetChain["PUBLIC"] = "stellar:pubnet";
    WalletConnectTargetChain["TESTNET"] = "stellar:testnet";
})(WalletConnectTargetChain || (WalletConnectTargetChain = {}));
export var WalletConnectAllowedMethods;
(function (WalletConnectAllowedMethods) {
    WalletConnectAllowedMethods["SIGN"] = "stellar_signXDR";
    WalletConnectAllowedMethods["SIGN_AND_SUBMIT"] = "stellar_signAndSubmitXDR";
})(WalletConnectAllowedMethods || (WalletConnectAllowedMethods = {}));
export const createWalletConnectClient = async (params) => {
    return SignClient.init({
        projectId: params.projectId,
        metadata: {
            name: params.name,
            url: params.url,
            description: params.description,
            icons: params.icons,
        },
    });
};
export const connectWalletConnect = async (params) => {
    try {
        const { uri, approval } = await params.client.connect({
            pairingTopic: params.pairingTopic,
            requiredNamespaces: {
                stellar: {
                    methods: params.methods || Object.values(WalletConnectAllowedMethods),
                    chains: params.chains,
                    events: [],
                },
            },
        });
        return new Promise((resolve, reject) => {
            // Open QRCode modal if a URI was returned (i.e. we're not connecting an existing pairing).
            if (uri) {
                QRCodeModal.open(uri, () => {
                    reject('QR Code Modal closed');
                });
            }
            // Await session approval from the wallet.
            approval()
                .then((session) => {
                QRCodeModal.close();
                resolve(session);
            })
                .catch((error) => {
                QRCodeModal.close();
                reject(error);
            });
        });
    }
    catch (e) {
        QRCodeModal.close();
        console.error(e);
        throw new Error('There was an error when trying to connect');
    }
};
export const parseWalletConnectSession = (session) => {
    const accounts = session.namespaces.stellar.accounts.map((account) => ({
        network: account.split(':')[1],
        publicKey: account.split(':')[2],
    }));
    return {
        id: session.topic,
        name: session.peer.metadata.name,
        description: session.peer.metadata.description,
        url: session.peer.metadata.url,
        icons: session.peer.metadata.icons[0],
        accounts,
    };
};
export const makeWalletConnectRequest = (params) => {
    return params.client.request({
        topic: params.topic,
        chainId: params.chain,
        request: {
            method: params.method || WalletConnectAllowedMethods.SIGN,
            params: { xdr: params.xdr },
        },
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FsbGV0Y29ubmVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvd2FsbGV0Y29ubmVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFdBQVcsTUFBTSw2QkFBNkIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFJeEQsTUFBTSxDQUFOLElBQVksd0JBR1g7QUFIRCxXQUFZLHdCQUF3QjtJQUNsQyxxREFBeUIsQ0FBQTtJQUN6Qix1REFBMkIsQ0FBQTtBQUM3QixDQUFDLEVBSFcsd0JBQXdCLEtBQXhCLHdCQUF3QixRQUduQztBQUVELE1BQU0sQ0FBTixJQUFZLDJCQUdYO0FBSEQsV0FBWSwyQkFBMkI7SUFDckMsdURBQXdCLENBQUE7SUFDeEIsMkVBQTRDLENBQUE7QUFDOUMsQ0FBQyxFQUhXLDJCQUEyQixLQUEzQiwyQkFBMkIsUUFHdEM7QUFFRCxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxLQUFLLEVBQUUsTUFNL0MsRUFBd0IsRUFBRTtJQUN6QixPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUM7UUFDckIsU0FBUyxFQUFFLE1BQU0sQ0FBQyxTQUFTO1FBQzNCLFFBQVEsRUFBRTtZQUNSLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSTtZQUNqQixHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUc7WUFDZixXQUFXLEVBQUUsTUFBTSxDQUFDLFdBQVc7WUFDL0IsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLO1NBQ3BCO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsS0FBSyxFQUFFLE1BSzFDLEVBQWdDLEVBQUU7SUFDakMsSUFBSTtRQUNGLE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEdBQUcsTUFBTSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztZQUNwRCxZQUFZLEVBQUUs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bm5lY3QvcXJjb2RlLW1vZGFsJztcbmltcG9ydCB7IFNpZ25DbGllbnQgfSBmcm9tICdAd2FsbGV0Y29ubmVjdC9zaWduLWNsaWVudCc7XG5pbXBvcnQgeyBJU2lnbkNsaWVudCB9IGZyb20gJ0B3YWxsZXRjb25uZWN0L3R5cGVzL2Rpc3QvdHlwZXMvc2lnbi1jbGllbnQvY2xpZW50JztcbmltcG9ydCB7IFNlc3Npb25UeXBlcyB9IGZyb20gJ0B3YWxsZXRjb25uZWN0L3R5cGVzL2Rpc3QvdHlwZXMvc2lnbi1jbGllbnQvc2Vzc2lvbic7XG5cbmV4cG9ydCBlbnVtIFdhbGxldENvbm5lY3RUYXJnZXRDaGFpbiB7XG4gIFBVQkxJQyA9ICdzdGVsbGFyOnB1Ym5ldCcsXG4gIFRFU1RORVQgPSAnc3RlbGxhcjp0ZXN0bmV0Jyxcbn1cblxuZXhwb3J0IGVudW0gV2FsbGV0Q29ubmVjdEFsbG93ZWRNZXRob2RzIHtcbiAgU0lHTiA9ICdzdGVsbGFyX3NpZ25YRFInLFxuICBTSUdOX0FORF9TVUJNSVQgPSAnc3RlbGxhcl9zaWduQW5kU3VibWl0WERSJyxcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVdhbGxldENvbm5lY3RDbGllbnQgPSBhc3luYyAocGFyYW1zOiB7XG4gIHByb2plY3RJZDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIHVybDogc3RyaW5nO1xuICBpY29uczogc3RyaW5nW107XG59KTogUHJvbWlzZTxJU2lnbkNsaWVudD4gPT4ge1xuICByZXR1cm4gU2lnbkNsaWVudC5pbml0KHtcbiAgICBwcm9qZWN0SWQ6IHBhcmFtcy5wcm9qZWN0SWQsXG4gICAgbWV0YWRhdGE6IHtcbiAgICAgIG5hbWU6IHBhcmFtcy5uYW1lLFxuICAgICAgdXJsOiBwYXJhbXMudXJsLFxuICAgICAgZGVzY3JpcHRpb246IHBhcmFtcy5kZXNjcmlwdGlvbixcbiAgICAgIGljb25zOiBwYXJhbXMuaWNvbnMsXG4gICAgfSxcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgY29ubmVjdFdhbGxldENvbm5lY3QgPSBhc3luYyAocGFyYW1zOiB7XG4gIGNsaWVudDogSVNpZ25DbGllbnQ7XG4gIGNoYWluczogV2FsbGV0Q29ubmVjdFRhcmdldENoYWluW107XG4gIG1ldGhvZHM/OiBXYWxsZXRDb25uZWN0QWxsb3dlZE1ldGhvZHNbXTtcbiAgcGFpcmluZ1RvcGljPzogc3RyaW5nO1xufSk6IFByb21pc2U8U2Vzc2lvblR5cGVzLlN0cnVjdD4gPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHsgdXJpLCBhcHByb3ZhbCB9ID0gYXdhaXQgcGFyYW1zLmNsaWVudC5jb25uZWN0KHtcbiAgICAgIHBhaXJpbmdUb3BpYzogcGFyYW1zLnBhaXJpbmdUb3BpYyxcbiAgICAgIHJlcXVpcmVkTmFtZXNwYWNlczoge1xuICAgICAgICBzdGVsbGFyOiB7XG4gICAgICAgICAgbWV0aG9kczogcGFyYW1zLm1ldGhvZHMgfHwgT2JqZWN0LnZhbHVlcyhXYWxsZXRDb25uZWN0QWxsb3dlZE1ldGhvZHMpLFxuICAgICAgICAgIGNoYWluczogcGFyYW1zLmNoYWlucyxcbiAgICAgICAgICBldmVudHM6IFtdLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAvLyBPcGVuIFFSQ29kZSBtb2RhbCBpZiBhIFVSSSB3YXMgcmV0dXJuZWQgKGkuZS4gd2UncmUgbm90IGNvbm5lY3RpbmcgYW4gZXhpc3RpbmcgcGFpcmluZykuXG4gICAgICBpZiAodXJpKSB7XG4gICAgICAgIFFSQ29kZU1vZGFsLm9wZW4odXJpLCAoKSA9PiB7XG4gICAgICAgICAgcmVqZWN0KCdRUiBDb2RlIE1vZGFsIGNsb3NlZCcpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gQXdhaXQgc2Vzc2lvbiBhcHByb3ZhbCBmcm9tIHRoZSB3YWxsZXQuXG4gICAgICBhcHByb3ZhbCgpXG4gICAgICAgIC50aGVuKChzZXNzaW9uKSA9PiB7XG4gICAgICAgICAgUVJDb2RlTW9kYWwuY2xvc2UoKTtcbiAgICAgICAgICByZXNvbHZlKHNlc3Npb24pO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgUVJDb2RlTW9kYWwuY2xvc2UoKTtcbiAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfSBjYXRjaCAoZTogdW5rbm93bikge1xuICAgIFFSQ29kZU1vZGFsLmNsb3NlKCk7XG4gICAgY29uc29sZS5lcnJvcihlKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZXJlIHdhcyBhbiBlcnJvciB3aGVuIHRyeWluZyB0byBjb25uZWN0Jyk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBwYXJzZVdhbGxldENvbm5lY3RTZXNzaW9uID0gKFxuICBzZXNzaW9uOiBTZXNzaW9uVHlwZXMuU3RydWN0XG4pOiBJUGFyc2VkV2FsbGV0Q29ubmVjdFNlc3Npb24gPT4ge1xuICBjb25zdCBhY2NvdW50cyA9IHNlc3Npb24ubmFtZXNwYWNlcy5zdGVsbGFyLmFjY291bnRzLm1hcChcbiAgICAoYWNjb3VudDogc3RyaW5nKSA9PiAoe1xuICAgICAgbmV0d29yazogYWNjb3VudC5zcGxpdCgnOicpWzFdIGFzICdwdWJuZXQnIHwgJ3Rlc3RuZXQnLFxuICAgICAgcHVibGljS2V5OiBhY2NvdW50LnNwbGl0KCc6JylbMl0sXG4gICAgfSlcbiAgKTtcblxuICByZXR1cm4ge1xuICAgIGlkOiBzZXNzaW9uLnRvcGljLFxuICAgIG5hbWU6IHNlc3Npb24ucGVlci5tZXRhZGF0YS5uYW1lLFxuICAgIGRlc2NyaXB0aW9uOiBzZXNzaW9uLnBlZXIubWV0YWRhdGEuZGVzY3JpcHRpb24sXG4gICAgdXJsOiBzZXNzaW9uLnBlZXIubWV0YWRhdGEudXJsLFxuICAgIGljb25zOiBzZXNzaW9uLnBlZXIubWV0YWRhdGEuaWNvbnNbMF0sXG4gICAgYWNjb3VudHMsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgbWFrZVdhbGxldENvbm5lY3RSZXF1ZXN0ID0gKFxuICBwYXJhbXM6IElXYWxsZXRDb25uZWN0UmVxdWVzdFBhcmFtc1xuKTogUHJvbWlzZTx7IHNpZ25lZFhEUjogc3RyaW5nIH0+ID0+IHtcbiAgcmV0dXJuIHBhcmFtcy5jbGllbnQucmVxdWVzdCh7XG4gICAgdG9waWM6IHBhcmFtcy50b3BpYyxcbiAgICBjaGFpbklkOiBwYXJhbXMuY2hhaW4sXG4gICAgcmVxdWVzdDoge1xuICAgICAgbWV0aG9kOiBwYXJhbXMubWV0aG9kIHx8IFdhbGxldENvbm5lY3RBbGxvd2VkTWV0aG9kcy5TSUdOLFxuICAgICAgcGFyYW1zOiB7IHhkcjogcGFyYW1zLnhkciB9LFxuICAgIH0sXG4gIH0pO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBJUGFyc2VkV2FsbGV0Q29ubmVjdFNlc3Npb24ge1xuICAvLyBcImlkXCIgaXMgdGhlIHRvcGljLCB3ZSBjYWxsIGl0IFwiaWRcIiB0byBtYWtlIGl0IGVhc2llciBmb3IgdGhvc2Ugbm90IGZhbWlsaWFyaXplZCB3aXRoIFdhbGxldENvbm5lY3RcbiAgaWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICB1cmw6IHN0cmluZztcbiAgaWNvbnM6IHN0cmluZztcbiAgYWNjb3VudHM6IEFycmF5PHtcbiAgICBuZXR3b3JrOiAncHVibmV0JyB8ICd0ZXN0bmV0JztcbiAgICBwdWJsaWNLZXk6IHN0cmluZztcbiAgfT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVdhbGxldENvbm5lY3RSZXF1ZXN0UGFyYW1zIHtcbiAgY2xpZW50OiBJU2lnbkNsaWVudDtcbiAgeGRyOiBzdHJpbmc7XG4gIHRvcGljOiBzdHJpbmc7XG4gIG1ldGhvZD86IFdhbGxldENvbm5lY3RBbGxvd2VkTWV0aG9kcztcbiAgY2hhaW46IFdhbGxldENvbm5lY3RUYXJnZXRDaGFpbjtcbn1cbiJdfQ==