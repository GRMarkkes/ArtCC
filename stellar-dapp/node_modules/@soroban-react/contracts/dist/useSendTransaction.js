"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSendTransaction = exports.contractTransaction = void 0;
const react_1 = __importDefault(require("react"));
const SorobanClient = __importStar(require("soroban-client"));
const sendTx_1 = require("./sendTx");
function contractTransaction({ networkPassphrase, source, contractId, method, params, }) {
    let myParams = params || [];
    const contract = new SorobanClient.Contract(contractId);
    return new SorobanClient.TransactionBuilder(source, {
        // TODO: Figure out the fee
        fee: '100',
        networkPassphrase,
    })
        .addOperation(contract.call(method, ...myParams))
        .setTimeout(SorobanClient.TimeoutInfinite)
        .build();
}
exports.contractTransaction = contractTransaction;
// useSendTransaction is a hook that returns a function that can be used to
// send a transaction. Upon sending, it will poll server.getTransactionStatus,
// until the transaction succeeds/fails, and return the result.
function useSendTransaction(defaultTxn, defaultOptions) {
    const [status, setState] = react_1.default.useState('idle');
    // TODO: as the sorobanContext is passed each time sendTransaction is called
    // we don't need anymore a useCallback hook. Convert useSendTransaction to a
    const sendTransaction = react_1.default.useCallback(function (passedTxn, passedOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            let sorobanContext;
            if (passedOptions === null || passedOptions === void 0 ? void 0 : passedOptions.sorobanContext) {
                sorobanContext = passedOptions === null || passedOptions === void 0 ? void 0 : passedOptions.sorobanContext;
            }
            let txn = passedTxn !== null && passedTxn !== void 0 ? passedTxn : defaultTxn;
            if (!((passedOptions === null || passedOptions === void 0 ? void 0 : passedOptions.secretKey) || (sorobanContext === null || sorobanContext === void 0 ? void 0 : sorobanContext.activeConnector))) {
                throw new Error('No secret key or active wallet. Provide at least one of those');
            }
            if (!txn ||
                !(sorobanContext === null || sorobanContext === void 0 ? void 0 : sorobanContext.activeConnector) ||
                !(sorobanContext === null || sorobanContext === void 0 ? void 0 : sorobanContext.activeChain)) {
                throw new Error('No transaction or wallet or chain');
            }
            if (!sorobanContext.server)
                throw new Error('Not connected to server');
            let activeChain = sorobanContext === null || sorobanContext === void 0 ? void 0 : sorobanContext.activeChain;
            let activeConnector = sorobanContext === null || sorobanContext === void 0 ? void 0 : sorobanContext.activeConnector;
            let server = sorobanContext === null || sorobanContext === void 0 ? void 0 : sorobanContext.server;
            const { timeout, skipAddingFootprint } = Object.assign(Object.assign({ timeout: 60000, skipAddingFootprint: false }, defaultOptions), passedOptions);
            const networkPassphrase = activeChain.networkPassphrase;
            setState('loading');
            // preflight and add the footprint
            if (!skipAddingFootprint) {
                txn = yield server.prepareTransaction(txn, networkPassphrase);
                if (!txn) {
                    throw new Error('No transaction after adding footprint');
                }
            }
            let signed = '';
            if (passedOptions === null || passedOptions === void 0 ? void 0 : passedOptions.secretKey) {
                // User as set a secretKey, txn will be signed using the secretKey
                const keypair = SorobanClient.Keypair.fromSecret(passedOptions.secretKey);
                txn.sign(keypair);
                signed = txn.toXDR();
            }
            else {
                // User has not set a secretKey, txn will be signed using the Connector (wallet) provided in the sorobanContext
                signed = yield activeConnector.signTransaction(txn.toXDR(), {
                    networkPassphrase,
                });
            }
            const transactionToSubmit = SorobanClient.TransactionBuilder.fromXDR(signed, networkPassphrase);
            let tx = transactionToSubmit;
            let secondsToWait = 10;
            const raw = yield (0, sendTx_1.sendTx)({ tx, secondsToWait, server });
            return Object.assign(Object.assign({}, raw), { xdr: raw.resultXdr });
        });
    }, [defaultTxn]);
    return {
        isIdle: status == 'idle',
        isError: status == 'error',
        isLoading: status == 'loading',
        isSuccess: status == 'success',
        sendTransaction,
        reset: () => { },
        status,
    };
}
exports.useSendTransaction = useSendTransaction;
