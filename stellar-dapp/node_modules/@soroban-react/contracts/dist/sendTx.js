"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendTx = void 0;
function sendTx({ tx, secondsToWait, server }) {
    return __awaiter(this, void 0, void 0, function* () {
        const sendTransactionResponse = yield server.sendTransaction(tx);
        let getTransactionResponse = yield server.getTransaction(sendTransactionResponse.hash);
        const waitUntil = new Date((Date.now() + secondsToWait * 1000)).valueOf();
        let waitTime = 1000;
        let exponentialFactor = 1.5;
        while ((Date.now() < waitUntil) && getTransactionResponse.status === "NOT_FOUND") {
            // Wait a beat
            yield new Promise(resolve => setTimeout(resolve, waitTime));
            /// Exponential backoff
            waitTime = waitTime * exponentialFactor;
            // See if the transaction is complete
            getTransactionResponse = yield server.getTransaction(sendTransactionResponse.hash);
        }
        if (getTransactionResponse.status === "NOT_FOUND") {
            console.log(`Waited ${secondsToWait} seconds for transaction to complete, but it did not. Returning anyway. Check the transaction status manually. Info: ${JSON.stringify(sendTransactionResponse, null, 2)}`);
        }
        return getTransactionResponse;
    });
}
exports.sendTx = sendTx;
