"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useContractValue = void 0;
const react_1 = __importDefault(require("react"));
const contractTransaction_1 = require("./contractTransaction");
const SorobanClient = __importStar(require("soroban-client"));
const defaultAddress_1 = require("./defaultAddress");
let xdr = SorobanClient.xdr;
// useContractValue is a hook that fetches the value of a contract method. It
// might be better named `useSimulateTransaction`, but not sure which is more clear...
// TODO: Allow user to specify the wallet of the submitter, fees, etc... Maybe
// a separate (lower-level) hook for `useSimulateTransaction` would be cleaner?
function useContractValue({ contractAddress, method, args, source, sorobanContext, }) {
    const { activeChain, address, server } = sorobanContext;
    const [value, setValue] = react_1.default.useState({ loading: true });
    const [xdrParams, setXdrParams] = react_1.default.useState(args ? args.map(p => p.toXDR().toString('base64')) : undefined);
    react_1.default.useEffect(() => {
        source = source !== null && source !== void 0 ? source : new SorobanClient.Account(address !== null && address !== void 0 ? address : defaultAddress_1.defaultAddress, '0');
        if (!activeChain) {
            setValue({ error: 'No active chain' });
            return;
        }
        if (!server) {
            setValue({ error: 'Not connected to server' });
            return;
        }
        ;
        (() => __awaiter(this, void 0, void 0, function* () {
            setValue({ loading: true });
            try {
                let result = yield fetchContractValue({
                    server: server,
                    networkPassphrase: activeChain.networkPassphrase,
                    contractAddress: contractAddress,
                    method: method,
                    args: args,
                    source: source,
                });
                setValue({ result });
            }
            catch (error) {
                if (typeof error == 'string') {
                    setValue({ error });
                    return;
                }
                if ('message' in error) {
                    setValue({ error: error.message });
                    return;
                }
                setValue({ error });
            }
        }))();
        // Have this re-fetch if the contractId/method/args change. Total hack with
        // xdr-base64 to enforce real equality instead of object equality
        // shenanigans.
    }, [contractAddress, method, xdrParams, activeChain, server, args]);
    return value;
}
exports.useContractValue = useContractValue;
function fetchContractValue({ server, networkPassphrase, contractAddress, method, args, source, }) {
    return __awaiter(this, void 0, void 0, function* () {
        //Builds the transaction.
        let txn = (0, contractTransaction_1.contractTransaction)({
            source,
            networkPassphrase,
            contractAddress,
            method,
            args,
        });
        let a = Math.random();
        const { results } = yield server.simulateTransaction(txn);
        if (!results || results.length !== 1) {
            throw new Error('Invalid response from simulateTransaction');
        }
        const result = results[0];
        return xdr.ScVal.fromXDR(result.xdr, 'base64');
    });
}
