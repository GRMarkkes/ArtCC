import { SorobanContextType } from '@soroban-react/core';
import * as SorobanClient from 'soroban-client';
import type { Transaction, TxResponse, Simulation } from './types';
export type TransactionStatus = 'idle' | 'error' | 'loading' | 'success';
export interface SendTransactionResult<E = Error> {
    data?: SorobanClient.xdr.ScVal;
    error?: E;
    isError: boolean;
    isIdle: boolean;
    isLoading: boolean;
    isSuccess: boolean;
    sendTransaction: (txn?: Transaction, opts?: SendTransactionOptions) => Promise<(TxResponse & {
        xdr: string;
    }) | Simulation>;
    reset: () => void;
    status: TransactionStatus;
}
export interface SendTransactionOptions {
    timeout?: number;
    skipAddingFootprint?: boolean;
    secretKey?: string;
    sorobanContext?: SorobanContextType;
}
export declare function useSendTransaction<E = Error>(defaultTxn?: Transaction, defaultOptions?: SendTransactionOptions): SendTransactionResult<E>;
