"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendTx = exports.signAndSendTransaction = void 0;
const SorobanClient = __importStar(require("soroban-client"));
function signAndSendTransaction({ txn, secretKey, skipAddingFootprint = false, sorobanContext }) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        let networkPassphrase = (_a = sorobanContext.activeChain) === null || _a === void 0 ? void 0 : _a.networkPassphrase;
        let server = sorobanContext.server;
        if (!secretKey && !sorobanContext.activeConnector)
            throw Error("signAndSend: no secretKey neither activeConnector");
        if (!server)
            throw Error("signAndSend: no server");
        if (!networkPassphrase)
            throw Error("signAndSend: no networkPassphrase");
        // preflight and add the footprint
        if (!skipAddingFootprint) {
            txn = yield server.prepareTransaction(txn, networkPassphrase);
            if (!txn) {
                throw new Error('No transaction after adding footprint');
            }
        }
        // // is it possible for `auths` to be present but empty? Probably not, but let's be safe.
        // const auths = simulated.results?.[0]?.auth;
        // let auth_len = auths?.length ?? 0;
        // if (auth_len > 1) {
        //   throw new NotImplementedError("Multiple auths not yet supported");
        // } else if (auth_len == 1) {
        //   // TODO: figure out how to fix with new SorobanClient
        //   // const auth = SorobanClient.xdr.SorobanAuthorizationEntry.fromXDR(auths![0]!, 'base64')
        //   // if (auth.addressWithNonce() !== undefined) {
        //   //   throw new NotImplementedError(
        //   //     `This transaction needs to be signed by ${auth.addressWithNonce()
        //   //     }; Not yet supported`
        //   //   )
        //   // }
        // }
        let signed = '';
        if (secretKey) {
            // User as set a secretKey, txn will be signed using the secretKey
            const keypair = SorobanClient.Keypair.fromSecret(secretKey);
            txn.sign(keypair);
            signed = txn.toXDR();
        }
        else if (sorobanContext.activeConnector) {
            // User has not set a secretKey, txn will be signed using the Connector (wallet) provided in the sorobanContext
            signed = yield sorobanContext.activeConnector.signTransaction(txn.toXDR(), {
                networkPassphrase,
            });
        }
        else {
            throw new Error("signAndSendTransaction: no secretKey, neither active Connector");
        }
        const transactionToSubmit = SorobanClient.TransactionBuilder.fromXDR(signed, networkPassphrase);
        let tx = transactionToSubmit;
        let secondsToWait = 10;
        const raw = yield sendTx({ tx, secondsToWait, server });
        return Object.assign(Object.assign({}, raw), { xdr: raw.resultXdr });
    });
}
exports.signAndSendTransaction = signAndSendTransaction;
function sendTx({ tx, secondsToWait, server }) {
    return __awaiter(this, void 0, void 0, function* () {
        const sendTransactionResponse = yield server.sendTransaction(tx);
        let getTransactionResponse = yield server.getTransaction(sendTransactionResponse.hash);
        const waitUntil = new Date((Date.now() + secondsToWait * 1000)).valueOf();
        let waitTime = 1000;
        let exponentialFactor = 1.5;
        while ((Date.now() < waitUntil) && getTransactionResponse.status === "NOT_FOUND") {
            // Wait a beat
            yield new Promise(resolve => setTimeout(resolve, waitTime));
            /// Exponential backoff
            waitTime = waitTime * exponentialFactor;
            // See if the transaction is complete
            getTransactionResponse = yield server.getTransaction(sendTransactionResponse.hash);
        }
        if (getTransactionResponse.status === "NOT_FOUND") {
            console.log(`Waited ${secondsToWait} seconds for transaction to complete, but it did not. Returning anyway. Check the transaction status manually. Info: ${JSON.stringify(sendTransactionResponse, null, 2)}`);
        }
        return getTransactionResponse;
    });
}
exports.sendTx = sendTx;
