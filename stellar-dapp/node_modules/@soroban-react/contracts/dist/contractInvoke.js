"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.contractInvoke = void 0;
const SorobanClient = __importStar(require("soroban-client"));
const transaction_1 = require("./transaction");
const contractTransaction_1 = require("./contractTransaction");
let xdr = SorobanClient.xdr;
// Dummy source account for simulation. The public key for this is all 0-bytes.
const defaultAddress = 'GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWHF';
function contractInvoke({ contractAddress, method, args = [], signAndSend = false, fee = 100, skipAddingFootprint, secretKey, sorobanContext, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { server, address, activeChain } = sorobanContext;
        if (!activeChain) {
            throw new Error('No active Chain');
        }
        if (!server) {
            throw new Error('No connected to a Server');
        }
        if (signAndSend && !secretKey && !sorobanContext.activeConnector) {
            throw new Error("contractInvoke: You are trying to sign a txn without providing a source, secretKey or active connector");
        }
        const networkPassphrase = activeChain === null || activeChain === void 0 ? void 0 : activeChain.networkPassphrase;
        const source = secretKey
            ? yield server.getAccount(SorobanClient.Keypair.fromSecret(secretKey).publicKey())
            : address
                ? yield (server === null || server === void 0 ? void 0 : server.getAccount(address))
                : new SorobanClient.Account(defaultAddress, "0");
        //Builds the transaction
        let txn = (0, contractTransaction_1.contractTransaction)({
            source,
            networkPassphrase,
            contractAddress,
            method,
            args,
        });
        const simulated = yield (server === null || server === void 0 ? void 0 : server.simulateTransaction(txn));
        if (!signAndSend && simulated) {
            const { results } = simulated;
            if (!results || results[0] === undefined) {
                if (simulated.error) {
                    console.log(simulated.error);
                    return undefined;
                }
                console.log(`Invalid response from simulateTransaction:\n{simulated}`);
                return undefined;
            }
            return results[0];
        }
        else {
            // If signAndSend
            return yield (0, transaction_1.signAndSendTransaction)({ txn, skipAddingFootprint, secretKey, sorobanContext });
        }
    });
}
exports.contractInvoke = contractInvoke;
