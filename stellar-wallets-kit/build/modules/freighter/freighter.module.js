import { getPublicKey, isConnected, signTransaction, signBlob, signAuthEntry } from '@stellar/freighter-api';
import { ModuleType } from '../../types';
export const FREIGHTER_ID = 'freighter';
export class FreighterModule {
    constructor() {
        this.moduleType = ModuleType.HOT_WALLET;
        this.productId = FREIGHTER_ID;
        this.productName = 'Freighter';
        this.productUrl = 'https://freighter.app';
        this.productIcon = 'https://stellar.creit.tech/wallet-icons/freighter.svg';
    }
    async isAvailable() {
        return isConnected();
    }
    async getPublicKey() {
        if (!(await isConnected())) {
            throw new Error(`Freighter is not connected`);
        }
        return getPublicKey();
    }
    async signTx(params) {
        if (!(await isConnected())) {
            throw new Error(`Freighter is not connected`);
        }
        let updatedXdr = params.xdr;
        for (const publicKey of params.publicKeys) {
            updatedXdr = await signTransaction(updatedXdr, {
                accountToSign: publicKey,
                networkPassphrase: params.network,
            });
        }
        return { result: updatedXdr };
    }
    async signBlob(params) {
        if (!(await isConnected())) {
            throw new Error(`Freighter is not connected`);
        }
        const result = await signBlob(params.blob, { accountToSign: params.publicKey });
        return { result };
    }
    async signAuthEntry(params) {
        if (!(await isConnected())) {
            throw new Error(`Freighter is not connected`);
        }
        const result = await signAuthEntry(params.entryPreimageXDR, {
            accountToSign: params.publicKey,
        });
        return { result };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJlaWdodGVyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2R1bGVzL2ZyZWlnaHRlci9mcmVpZ2h0ZXIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0csT0FBTyxFQUFtQixVQUFVLEVBQWlCLE1BQU0sYUFBYSxDQUFDO0FBRXpFLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxXQUFXLENBQUM7QUFFeEMsTUFBTSxPQUFPLGVBQWU7SUFBNUI7UUFDRSxlQUFVLEdBQWUsVUFBVSxDQUFDLFVBQVUsQ0FBQztRQUUvQyxjQUFTLEdBQVcsWUFBWSxDQUFDO1FBQ2pDLGdCQUFXLEdBQVcsV0FBVyxDQUFDO1FBQ2xDLGVBQVUsR0FBVyx1QkFBdUIsQ0FBQztRQUM3QyxnQkFBVyxHQUFXLHVEQUF1RCxDQUFDO0lBbURoRixDQUFDO0lBakRDLEtBQUssQ0FBQyxXQUFXO1FBQ2YsT0FBTyxXQUFXLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsS0FBSyxDQUFDLFlBQVk7UUFDaEIsSUFBSSxDQUFDLENBQUMsTUFBTSxXQUFXLEVBQUUsQ0FBQyxFQUFFO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQztTQUMvQztRQUVELE9BQU8sWUFBWSxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBcUU7UUFDaEYsSUFBSSxDQUFDLENBQUMsTUFBTSxXQUFXLEVBQUUsQ0FBQyxFQUFFO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQztTQUMvQztRQUVELElBQUksVUFBVSxHQUFXLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDcEMsS0FBSyxNQUFNLFNBQVMsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO1lBQ3pDLFVBQVUsR0FBRyxNQUFNLGVBQWUsQ0FBQyxVQUFVLEVBQUU7Z0JBQzdDLGFBQWEsRUFBRSxTQUFTO2dCQUN4QixpQkFBaUIsRUFBRSxNQUFNLENBQUMsT0FBTzthQUNsQyxDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVELEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBMkM7UUFDeEQsSUFBSSxDQUFDLENBQUMsTUFBTSxXQUFXLEVBQUUsQ0FBQyxFQUFFO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQztTQUMvQztRQUVELE1BQU0sTUFBTSxHQUFXLE1BQU0sUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxhQUFhLEVBQUUsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFFeEYsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxLQUFLLENBQUMsYUFBYSxDQUFDLE1BQXVEO1FBQ3pFLElBQUksQ0FBQyxDQUFDLE1BQU0sV0FBVyxFQUFFLENBQUMsRUFBRTtZQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7U0FDL0M7UUFFRCxNQUFNLE1BQU0sR0FBVyxNQUFNLGFBQWEsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEVBQUU7WUFDbEUsYUFBYSxFQUFFLE1BQU0sQ0FBQyxTQUFTO1NBQ2hDLENBQUMsQ0FBQztRQUVILE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQztJQUNwQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRQdWJsaWNLZXksIGlzQ29ubmVjdGVkLCBzaWduVHJhbnNhY3Rpb24sIHNpZ25CbG9iLCBzaWduQXV0aEVudHJ5IH0gZnJvbSAnQHN0ZWxsYXIvZnJlaWdodGVyLWFwaSc7XG5pbXBvcnQgeyBNb2R1bGVJbnRlcmZhY2UsIE1vZHVsZVR5cGUsIFdhbGxldE5ldHdvcmsgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBGUkVJR0hURVJfSUQgPSAnZnJlaWdodGVyJztcblxuZXhwb3J0IGNsYXNzIEZyZWlnaHRlck1vZHVsZSBpbXBsZW1lbnRzIE1vZHVsZUludGVyZmFjZSB7XG4gIG1vZHVsZVR5cGU6IE1vZHVsZVR5cGUgPSBNb2R1bGVUeXBlLkhPVF9XQUxMRVQ7XG5cbiAgcHJvZHVjdElkOiBzdHJpbmcgPSBGUkVJR0hURVJfSUQ7XG4gIHByb2R1Y3ROYW1lOiBzdHJpbmcgPSAnRnJlaWdodGVyJztcbiAgcHJvZHVjdFVybDogc3RyaW5nID0gJ2h0dHBzOi8vZnJlaWdodGVyLmFwcCc7XG4gIHByb2R1Y3RJY29uOiBzdHJpbmcgPSAnaHR0cHM6Ly9zdGVsbGFyLmNyZWl0LnRlY2gvd2FsbGV0LWljb25zL2ZyZWlnaHRlci5zdmcnO1xuXG4gIGFzeW5jIGlzQXZhaWxhYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybiBpc0Nvbm5lY3RlZCgpO1xuICB9XG5cbiAgYXN5bmMgZ2V0UHVibGljS2V5KCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgaWYgKCEoYXdhaXQgaXNDb25uZWN0ZWQoKSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRnJlaWdodGVyIGlzIG5vdCBjb25uZWN0ZWRgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0UHVibGljS2V5KCk7XG4gIH1cblxuICBhc3luYyBzaWduVHgocGFyYW1zOiB7IHhkcjogc3RyaW5nOyBwdWJsaWNLZXlzOiBzdHJpbmdbXTsgbmV0d29yazogV2FsbGV0TmV0d29yayB9KTogUHJvbWlzZTx7IHJlc3VsdDogc3RyaW5nIH0+IHtcbiAgICBpZiAoIShhd2FpdCBpc0Nvbm5lY3RlZCgpKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGcmVpZ2h0ZXIgaXMgbm90IGNvbm5lY3RlZGApO1xuICAgIH1cblxuICAgIGxldCB1cGRhdGVkWGRyOiBzdHJpbmcgPSBwYXJhbXMueGRyO1xuICAgIGZvciAoY29uc3QgcHVibGljS2V5IG9mIHBhcmFtcy5wdWJsaWNLZXlzKSB7XG4gICAgICB1cGRhdGVkWGRyID0gYXdhaXQgc2lnblRyYW5zYWN0aW9uKHVwZGF0ZWRYZHIsIHtcbiAgICAgICAgYWNjb3VudFRvU2lnbjogcHVibGljS2V5LFxuICAgICAgICBuZXR3b3JrUGFzc3BocmFzZTogcGFyYW1zLm5ldHdvcmssXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4geyByZXN1bHQ6IHVwZGF0ZWRYZHIgfTtcbiAgfVxuXG4gIGFzeW5jIHNpZ25CbG9iKHBhcmFtczogeyBibG9iOiBzdHJpbmc7IHB1YmxpY0tleTogc3RyaW5nIH0pOiBQcm9taXNlPHsgcmVzdWx0OiBzdHJpbmcgfT4ge1xuICAgIGlmICghKGF3YWl0IGlzQ29ubmVjdGVkKCkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZyZWlnaHRlciBpcyBub3QgY29ubmVjdGVkYCk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0OiBzdHJpbmcgPSBhd2FpdCBzaWduQmxvYihwYXJhbXMuYmxvYiwgeyBhY2NvdW50VG9TaWduOiBwYXJhbXMucHVibGljS2V5IH0pO1xuXG4gICAgcmV0dXJuIHsgcmVzdWx0IH07XG4gIH1cblxuICBhc3luYyBzaWduQXV0aEVudHJ5KHBhcmFtczogeyBlbnRyeVByZWltYWdlWERSOiBzdHJpbmc7IHB1YmxpY0tleTogc3RyaW5nIH0pOiBQcm9taXNlPHsgcmVzdWx0OiBzdHJpbmcgfT4ge1xuICAgIGlmICghKGF3YWl0IGlzQ29ubmVjdGVkKCkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZyZWlnaHRlciBpcyBub3QgY29ubmVjdGVkYCk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0OiBzdHJpbmcgPSBhd2FpdCBzaWduQXV0aEVudHJ5KHBhcmFtcy5lbnRyeVByZWltYWdlWERSLCB7XG4gICAgICBhY2NvdW50VG9TaWduOiBwYXJhbXMucHVibGljS2V5LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHsgcmVzdWx0IH07XG4gIH1cbn1cbiJdfQ==