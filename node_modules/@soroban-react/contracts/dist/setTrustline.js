"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setTrustline = void 0;
const SorobanClient = __importStar(require("soroban-client"));
function setTrustline({ tokenSymbol, tokenAdmin, account, sorobanContext, sendTransaction, }) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const server = sorobanContext.server;
        const networkPassphrase = (_b = (_a = sorobanContext.activeChain) === null || _a === void 0 ? void 0 : _a.networkPassphrase) !== null && _b !== void 0 ? _b : '';
        if (!server)
            throw new Error('Not connected to server');
        if (!networkPassphrase)
            throw new Error('No networkPassphrase');
        let walletSource = yield server.getAccount(account);
        const trustlineResult = yield sendTransaction(new SorobanClient.TransactionBuilder(walletSource, {
            networkPassphrase,
            fee: '1000', // arbitrary
        })
            .setTimeout(60)
            .addOperation(SorobanClient.Operation.changeTrust({
            asset: new SorobanClient.Asset(tokenSymbol, tokenAdmin),
        }))
            .build(), {
            timeout: 60 * 1000,
            skipAddingFootprint: true,
            // omit `secretKey` to have Freighter prompt for signing
            // hence, we need to explicit the sorobanContext
            sorobanContext,
        });
        console.debug(trustlineResult);
        return trustlineResult;
    });
}
exports.setTrustline = setTrustline;
