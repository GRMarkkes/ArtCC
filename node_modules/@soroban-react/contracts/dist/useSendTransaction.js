"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSendTransaction = void 0;
const react_1 = __importDefault(require("react"));
const transaction_1 = require("./transaction");
// useSendTransaction is a hook that returns a function that can be used to
// send a transaction. Upon sending, it will poll server.getTransactionStatus,
// until the transaction succeeds/fails, and return the result.
function useSendTransaction(defaultTxn, defaultOptions) {
    const [status, setState] = react_1.default.useState('idle');
    // TODO: as the sorobanContext is passed each time sendTransaction is called
    // we don't need anymore a useCallback hook. Convert useSendTransaction to a
    const sendTransaction = react_1.default.useCallback(function (passedTxn, passedOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            let sorobanContext;
            if (passedOptions === null || passedOptions === void 0 ? void 0 : passedOptions.sorobanContext) {
                sorobanContext = passedOptions === null || passedOptions === void 0 ? void 0 : passedOptions.sorobanContext;
            }
            let txn = passedTxn !== null && passedTxn !== void 0 ? passedTxn : defaultTxn;
            if (!((passedOptions === null || passedOptions === void 0 ? void 0 : passedOptions.secretKey) || (sorobanContext === null || sorobanContext === void 0 ? void 0 : sorobanContext.activeConnector))) {
                throw new Error('No secret key or active wallet. Provide at least one of those');
            }
            if (!txn ||
                !(sorobanContext === null || sorobanContext === void 0 ? void 0 : sorobanContext.activeConnector) ||
                !(sorobanContext === null || sorobanContext === void 0 ? void 0 : sorobanContext.activeChain)) {
                throw new Error('No transaction or wallet or chain');
            }
            if (!sorobanContext.server)
                throw new Error('Not connected to server');
            let activeChain = sorobanContext === null || sorobanContext === void 0 ? void 0 : sorobanContext.activeChain;
            let activeConnector = sorobanContext === null || sorobanContext === void 0 ? void 0 : sorobanContext.activeConnector;
            let server = sorobanContext === null || sorobanContext === void 0 ? void 0 : sorobanContext.server;
            const { timeout, skipAddingFootprint } = Object.assign(Object.assign({ timeout: 60000, skipAddingFootprint: false }, defaultOptions), passedOptions);
            const networkPassphrase = activeChain.networkPassphrase;
            setState('loading');
            return yield (0, transaction_1.signAndSendTransaction)({ txn,
                secretKey: passedOptions === null || passedOptions === void 0 ? void 0 : passedOptions.secretKey,
                skipAddingFootprint,
                sorobanContext });
        });
    }, [defaultTxn]);
    return {
        isIdle: status == 'idle',
        isError: status == 'error',
        isLoading: status == 'loading',
        isSuccess: status == 'success',
        sendTransaction,
        reset: () => { },
        status,
    };
}
exports.useSendTransaction = useSendTransaction;
