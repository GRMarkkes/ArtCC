import { __assign, __rest, __spreadArray } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { cloneElement } from "react";
import { Label } from "../Label";
import { FieldNote } from "../utils/FieldNote";
import "./styles.scss";
export var Textarea = function (_a) {
    var id = _a.id, fieldSize = _a.fieldSize, _b = _a.children, children = _b === void 0 ? "" : _b, label = _a.label, note = _a.note, error = _a.error, isError = _a.isError, isLabelUppercase = _a.isLabelUppercase, isExtraPadding = _a.isExtraPadding, customTextarea = _a.customTextarea, _c = _a.spellCheck, spellCheck = _c === void 0 ? false : _c, _d = _a.autoComplete, autoComplete = _d === void 0 ? "off" : _d, props = __rest(_a, ["id", "fieldSize", "children", "label", "note", "error", "isError", "isLabelUppercase", "isExtraPadding", "customTextarea", "spellCheck", "autoComplete"]);
    var additionalClasses = __spreadArray(__spreadArray(__spreadArray([
        "Textarea--".concat(fieldSize)
    ], (props.disabled ? ["Textarea--disabled"] : []), true), (isError || error ? ["Textarea--error"] : []), true), (isExtraPadding ? ["Textarea--extra-padding"] : []), true).join(" ");
    var baseTextareaProps = {
        id: id,
        "aria-invalid": !!(isError || error),
        spellCheck: spellCheck,
        autoComplete: autoComplete,
    };
    return (_jsxs("div", __assign({ className: "Textarea ".concat(additionalClasses) }, { children: [label && (_jsx(Label, __assign({ htmlFor: id, isUppercase: isLabelUppercase, size: fieldSize === "xs" ? "xs" : "sm" }, { children: label }))), customTextarea ? (cloneElement(customTextarea, __assign(__assign({}, baseTextareaProps), props))) : (_jsx("textarea", __assign({}, baseTextareaProps, props, { children: children }))), note && _jsx(FieldNote, { children: note }), error && _jsx(FieldNote, __assign({ variant: "error" }, { children: error }))] })));
};
Textarea.displayName = "Textarea";
//# sourceMappingURL=index.js.map