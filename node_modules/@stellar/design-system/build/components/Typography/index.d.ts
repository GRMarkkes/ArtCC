/// <reference types="react" />
import "./styles.scss";
interface HeadingProps extends React.HtmlHTMLAttributes<HTMLHeadingElement> {
    as: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
    addlClassName?: string;
    size: "xxl" | "xl" | "lg" | "md" | "sm" | "xs";
    children: string | React.ReactNode;
}
export declare const Heading: {
    ({ addlClassName, as: HtmlTag, size, children, ...props }: HeadingProps): JSX.Element;
    displayName: string;
};
interface CaptionProps extends React.HtmlHTMLAttributes<HTMLDivElement> {
    size: "lg" | "md" | "sm" | "xs";
    addlClassName?: string;
    children: string | React.ReactNode;
}
export declare const Caption: {
    ({ addlClassName, size, children, ...props }: CaptionProps): JSX.Element;
    displayName: string;
};
interface ParagraphProps extends React.HtmlHTMLAttributes<HTMLParagraphElement | HTMLDivElement> {
    addlClassName?: string;
    size: "lg" | "md" | "sm" | "xs";
    children: string | React.ReactNode;
    asDiv?: boolean;
}
export declare const Paragraph: {
    ({ addlClassName, size, children, asDiv, ...props }: ParagraphProps): JSX.Element;
    displayName: string;
};
interface TitleProps extends React.HtmlHTMLAttributes<HTMLDivElement> {
    addlClassName?: string;
    size: "lg" | "md" | "sm" | "xs";
    children: string | React.ReactNode;
}
export declare const Title: {
    ({ addlClassName, size, children, ...props }: TitleProps): JSX.Element;
    displayName: string;
};
export {};
//# sourceMappingURL=index.d.ts.map