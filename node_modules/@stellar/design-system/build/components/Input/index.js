import { __assign, __rest, __spreadArray } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { cloneElement, useLayoutEffect, useRef, useState } from "react";
import { Label } from "../Label";
import { Icon } from "../../icons";
import { FieldNote } from "../utils/FieldNote";
import "./styles.scss";
export var Input = function (_a) {
    var customInput = _a.customInput, id = _a.id, label = _a.label, fieldSize = _a.fieldSize, isLabelUppercase = _a.isLabelUppercase, isPill = _a.isPill, isError = _a.isError, isExtraPadding = _a.isExtraPadding, isPassword = _a.isPassword, rightElement = _a.rightElement, note = _a.note, error = _a.error, props = __rest(_a, ["customInput", "id", "label", "fieldSize", "isLabelUppercase", "isPill", "isError", "isExtraPadding", "isPassword", "rightElement", "note", "error"]);
    var _b = useState(0), sideElWidthRem = _b[0], setSideElWidthRem = _b[1];
    var _c = useState(true), isPasswordMasked = _c[0], setIsPasswordMasked = _c[1];
    var sideEl = useRef(null);
    var getRightSideElWidth = function () {
        if (sideEl === null || sideEl === void 0 ? void 0 : sideEl.current) {
            setSideElWidthRem(sideEl.current.getBoundingClientRect().width / 16);
        }
    };
    useLayoutEffect(function () {
        getRightSideElWidth();
    }, []);
    var additionalClasses = __spreadArray(__spreadArray(__spreadArray(__spreadArray([
        "Input--".concat(fieldSize)
    ], (props.disabled ? ["Input--disabled"] : []), true), (isError || error ? ["Input--error"] : []), true), (isPill ? ["Input--pill"] : []), true), (isExtraPadding ? ["Input--extra-padding"] : []), true).join(" ");
    var inputPaddingRight = sideElWidthRem !== 0
        ? "calc(var(--Input-padding-horizontal) * 2 + ".concat(sideElWidthRem, "rem)")
        : "";
    var baseInputProps = __assign({ id: id, "aria-invalid": !!(isError || error) }, (inputPaddingRight
        ? { style: { paddingRight: inputPaddingRight } }
        : {}));
    return (_jsxs("div", __assign({ className: "Input ".concat(additionalClasses) }, { children: [label && (_jsx(Label, __assign({ htmlFor: id, isUppercase: isLabelUppercase, size: fieldSize === "xs" ? "xs" : "sm" }, { children: label }))), _jsxs("div", __assign({ className: "Input__container" }, { children: [customInput ? (cloneElement(customInput, __assign(__assign({}, baseInputProps), props))) : (_jsx("input", __assign({}, baseInputProps, props, (isPassword
                        ? { type: isPasswordMasked ? "password" : "text" }
                        : {})))), rightElement && (_jsx("div", __assign({ ref: sideEl, className: "Input__side-element" }, { children: rightElement }))), isPassword && (_jsx("div", __assign({ className: "Input__side-element" }, { children: _jsx("button", __assign({ className: "PasswordMaskToggle", onClick: function (event) {
                                event === null || event === void 0 ? void 0 : event.preventDefault();
                                setIsPasswordMasked(!isPasswordMasked);
                            } }, { children: isPasswordMasked ? _jsx(Icon.Hide, {}) : _jsx(Icon.Show, {}) })) })))] })), note && _jsx(FieldNote, { children: note }), error && _jsx(FieldNote, __assign({ variant: "error" }, { children: error }))] })));
};
Input.displayName = "Input";
//# sourceMappingURL=index.js.map