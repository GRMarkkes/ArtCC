"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.authorizeInvocation = authorizeInvocation;
exports.authorizeInvocationCallback = authorizeInvocationCallback;
exports.buildAuthEntry = buildAuthEntry;
exports.buildAuthEnvelope = buildAuthEnvelope;
var _xdr = _interopRequireDefault(require("./xdr"));
var _strkey = require("./strkey");
var _keypair = require("./keypair");
var _hashing = require("./hashing");
var _address = require("./address");
var _scval = require("./scval");
var _authorizeInvocationCallback;
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
/**
 * This builds an authorization entry that indicates to
 * {@link Operation.invokeHostFunction} that a particular identity (i.e. signing
 * {@link Keypair} or other signer) approves the execution of an invocation tree
 * (i.e. a simulation-acquired {@link xdr.SorobanAuthorizedInvocation}) on a
 * particular network (uniquely identified by its passphrase, see
 * {@link Networks}) until a particular ledger sequence is reached.
 *
 * This enables building an {@link xdr.SorobanAuthorizationEntry} without
 * worrying about how to combine {@link buildAuthEnvelope} and
 * {@link buildAuthEntry}, while those allow advanced, asynchronous, two-step
 * building+signing of the authorization entries.
 *
 * This one lets you pass a either a {@link Keypair} or a callback function to
 * handle signing the envelope hash.
 *
 * @param {Keypair} signer   the identity keypair authorizing this invocation
 * @param {string}  networkPassphrase   the network passphrase is incorprated
 *    into the signature (see {@link Networks} for options)
 * @param {number}  validUntil  the (exclusive) future ledger sequence number
 *    until which this authorization entry should be valid (if
 *    `currentLedgerSeq==validUntil`, this is expired))
 * @param {xdr.SorobanAuthorizedInvocation} invocation the invocation tree that
 *    we're authorizing (likely, this comes from transaction simulation)
 *
 * @returns {xdr.SorobanAuthorizationEntry}  an authorization entry that you can
 *    pass along to {@link Operation.invokeHostFunction}
 */
function authorizeInvocation(signer, networkPassphrase, validUntil, invocation) {
  var preimage = buildAuthEnvelope(networkPassphrase, validUntil, invocation);
  var input = (0, _hashing.hash)(preimage.toXDR());
  var signature = signer.sign(input);
  return buildAuthEntry(preimage, signature, signer.publicKey());
}

/**
 * This works like {@link authorizeInvocation}, but allows passing an
 * asynchronous callback as a "signing method" (e.g. {@link Keypair.sign}) and a
 * public key instead of a specific {@link Keypair}.
 *
 * This is to make two-step authorization (i.e. custom signing flows) easier.
 *
 * @borrows authorizeInvocation
 *
 * @param {string} publicKey    the public identity that is authorizing this
 *    invocation via its signature
 * @param {function(Buffer): Buffer} signingMethod  a function which takes
 *    an input bytearray and returns its signature as signed by the private key
 *    corresponding to the `publicKey` parameter
 * @param {string}  networkPassphrase   the network passphrase is incorprated
 *    into the signature (see {@link Networks} for options)
 * @param {number} validUntil   the (exclusive) future ledger sequence number
 *    until which this authorization entry should be valid (if
 *    `currentLedgerSeq==validUntil`, this is expired)
 * @param {xdr.SorobanAuthorizedInvocation} invocation the invocation tree that
 *    we're authorizing (likely, this comes from transaction simulation)
 *
 * @returns {Promise<xdr.SorobanAuthorizationEntry>}
 * @see authorizeInvocation
 */
function authorizeInvocationCallback(_x, _x2, _x3, _x4, _x5) {
  return (_authorizeInvocationCallback = _authorizeInvocationCallback || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(publicKey, signingMethod, networkPassphrase, validUntil, invocation) {
    var preimage, input, signature;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          preimage = buildAuthEnvelope(networkPassphrase, validUntil, invocation);
          input = (0, _hashing.hash)(preimage.toXDR());
          _context.next = 4;
          return signingMethod(input);
        case 4:
          signature = _context.sent;
          return _context.abrupt("return", buildAuthEntry(preimage, signature, publicKey));
        case 6:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }))).apply(this, arguments);
}
/**
 * Builds an {@link xdr.HashIdPreimage} that, when hashed and signed, can be
 * used to build an {@link xdr.SorobanAuthorizationEntry} via
 * {@link buildAuthEnvelope} to approve {@link Operation.invokeHostFunction}
 * invocations.
 *
 * The envelope built here will approve the execution of an invocation tree
 * (i.e. a simulation-acquired {@link xdr.SorobanAuthorizedInvocation}) on a
 * particular network (uniquely identified by its passphrase, see
 * {@link Networks}) until a particular ledger sequence is reached (exclusive).
 *
 * @param {string}  networkPassphrase   the network passphrase is incorprated
 *    into the signature (see {@link Networks} for options)
 * @param {number}  validUntil the (exclusive) future ledger sequence number
 *    until which this authorization entry should be valid
 * @param {xdr.SorobanAuthorizedInvocation} invocation the invocation tree that
 *    we're authorizing (likely, this comes from transaction simulation)
 *
 * @returns {xdr.HashIdPreimage}  a preimage envelope that, when hashed and
 *    signed, represents the signature necessary to build a proper
 *    {@link xdr.SorobanAuthorizationEntry} via {@link buildAuthEntry}.
 */
function buildAuthEnvelope(networkPassphrase, validUntil, invocation) {
  // We use keypairs as a source of randomness for the nonce to avoid mucking
  // with any crypto dependencies. Note that this just has to be random and
  // unique, not cryptographically secure, so it's fine.
  var kp = _keypair.Keypair.random().rawPublicKey();
  var nonce = new _xdr["default"].Int64(bytesToInt64(kp));
  var networkId = (0, _hashing.hash)(Buffer.from(networkPassphrase));
  var envelope = new _xdr["default"].HashIdPreimageSorobanAuthorization({
    networkId: networkId,
    invocation: invocation,
    nonce: nonce,
    signatureExpirationLedger: validUntil
  });
  return _xdr["default"].HashIdPreimage.envelopeTypeSorobanAuthorization(envelope);
}

/**
 * Builds an auth entry with a signed invocation tree.
 *
 * You should first build the envelope using {@link buildAuthEnvelope}. If you
 * have a signing {@link Keypair}, you can use the more convenient
 * {@link authorizeInvocation} to do signing for you.
 *
 * @param {xdr.HashIdPreimage} envelope   an envelope to represent the call tree
 *    being signed, probably built by {@link buildAuthEnvelope}
 * @param {Buffer|Uint8Array} signature   a signature of the hash of the
 *    envelope by the private key corresponding to `publicKey` (in other words,
 *    `signature = sign(hash(envelope))`)
 * @param {string} publicKey  the public identity that signed this envelope
 *
 * @returns {xdr.SorobanAuthorizationEntry}
 *
 * @throws {Error} if `verify(hash(envelope), signature, publicKey)` does not
 *    pass, meaning one of the arguments was not passed or built correctly
 * @throws {TypeError} if the envelope does not hold an
 *    {@link xdr.HashIdPreimageSorobanAuthorization} instance
 */
function buildAuthEntry(envelope, signature, publicKey) {
  // ensure this identity signed this envelope correctly
  if (!_keypair.Keypair.fromPublicKey(publicKey).verify((0, _hashing.hash)(envelope.toXDR()), signature)) {
    throw new Error("signature does not match envelope or identity");
  }
  if (envelope["switch"]() !== _xdr["default"].EnvelopeType.envelopeTypeSorobanAuthorization()) {
    throw new TypeError("expected sorobanAuthorization envelope, got ".concat(envelope["switch"]().name));
  }
  var auth = envelope.sorobanAuthorization();
  return new _xdr["default"].SorobanAuthorizationEntry({
    rootInvocation: auth.invocation(),
    credentials: _xdr["default"].SorobanCredentials.sorobanCredentialsAddress(new _xdr["default"].SorobanAddressCredentials({
      address: new _address.Address(publicKey).toScAddress(),
      nonce: auth.nonce(),
      signatureExpirationLedger: auth.signatureExpirationLedger(),
      // This structure is defined here:
      // https://soroban.stellar.org/docs/fundamentals-and-concepts/invoking-contracts-with-transactions#stellar-account-signatures
      //
      // Encoding a contract structure as an ScVal means the keys are supposed
      // to be symbols, hence the forced typing here.
      signature: _xdr["default"].ScVal.scvVec([(0, _scval.nativeToScVal)({
        public_key: _strkey.StrKey.decodeEd25519PublicKey(publicKey),
        signature: signature
      }, {
        type: {
          public_key: ['symbol', null],
          signature: ['symbol', null]
        }
      })])
    }))
  });
}
function bytesToInt64(bytes) {
  // eslint-disable-next-line no-bitwise
  return bytes.subarray(0, 8).reduce(function (accum, b) {
    return accum << 8 | b;
  }, 0);
}